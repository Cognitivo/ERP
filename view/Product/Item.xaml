<Page x:Class="Cognitivo.Product.Item" Title="{lex:Loc Items}"
	  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	  xmlns:entity="clr-namespace:entity;assembly=Entity"
      xmlns:Controller="clr-namespace:entity.Controller.Product;assembly=entity"
	  xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
	  xmlns:customcmd="clr-namespace:Cognitivo.Class"
	  xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
	  xmlns:prop="clr-namespace:Cognitivo.Product"
	  xmlns:cntrl="clr-namespace:cntrl;assembly=cntrl"
      xmlns:mainpref="clr-namespace:Cognitivo.Properties"
      xmlns:Controls="clr-namespace:cntrl.Controls;assembly=cntrl"
		xmlns:lex="http://wpflocalizeextension.codeplex.com"
		lex:LocalizeDictionary.DesignCulture="es-PY"
		lex:ResxLocalizationProvider.DefaultAssembly="Cognitivo"
		lex:ResxLocalizationProvider.DefaultDictionary="local"
	  xmlns:local="clr-namespace:cntrl;assembly=cntrl"
	  xmlns:convert="clr-namespace:Cognitivo.Converters"
	  Loaded="Item_Loaded"
	  mc:Ignorable="d" MinHeight="400" MinWidth="800">
    <Page.CommandBindings>
        <CommandBinding x:Name="DeleteCommand" Command="customcmd:CustomCommands.Delete"
						CanExecute="DeleteCommand_CanExecute" Executed="DeleteCommand_Executed" />
    </Page.CommandBindings>
    <Page.Resources>
        <convert:ToStringFormatConverter x:Key="ToStringFormatConverter" />
        <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
        <convert:TrueToFalseConverter x:Key="TrueToFalse" />
        <convert:ActiveToStatusforitem x:Key="ActiveToStatusforitem" />
        <convert:ItemProduct2VisibilityConverter x:Key="ItemProduct2VisibilityConverter" />
        <Controller:ItemController x:Key="ItemDB"/>
        <CollectionViewSource x:Key="itemViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:item}, CreateList=True}" />
        <CollectionViewSource x:Key="app_measurementViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:app_measurement}, CreateList=True}" />
        <CollectionViewSource x:Key="app_measurementViewSourcenew" d:DesignSource="{d:DesignInstance {x:Type entity:app_measurement}, CreateList=True}" />
        <CollectionViewSource x:Key="app_measurementViewSourceconvert" d:DesignSource="{d:DesignInstance {x:Type entity:app_measurement}, CreateList=True}" />
        <CollectionViewSource x:Key="app_dimentionViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:app_dimension}, CreateList=True}" />
        <CollectionViewSource x:Key="app_currencyViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:app_currency}, CreateList=True}" />
        <CollectionViewSource x:Key="app_vat_groupViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:app_vat_group}, CreateList=True}" />
        <CollectionViewSource x:Key="item_price_listViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:item_price_list}, CreateList=True}" />
        <CollectionViewSource x:Key="itemitem_priceViewSource" Source="{Binding item_price, Source={StaticResource itemViewSource}}" />
        <CollectionViewSource x:Key="itemitem_productViewSource" Source="{Binding item_product, Source={StaticResource itemViewSource}}" />
        <CollectionViewSource x:Key="itemitem_serviceViewSource" Source="{Binding item_service, Source={StaticResource itemViewSource}}" />
        <CollectionViewSource x:Key="itemitem_tagdetailViewSource" Source="{Binding item_tag_detail, Source={StaticResource itemViewSource}}" />
        <CollectionViewSource x:Key="item_tagViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:item_tag}, CreateList=True}" />
        <CollectionViewSource x:Key="item_templateViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:item_template}, CreateList=True}" />
        <CollectionViewSource x:Key="item_templateitem_template_detaildetailViewSource" Source="{Binding item_template_detail, Source={StaticResource item_templateViewSource}}" />
        <CollectionViewSource x:Key="itemitem_dimentionViewSource" Source="{Binding item_dimension, Source={StaticResource itemViewSource}}" />
        <CollectionViewSource x:Key="itemitem_conversion_factorViewSource" Source="{Binding item_conversion_factor, Source={StaticResource itemitem_productViewSource}}" />
        <CollectionViewSource x:Key="item_brandViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:item_brand}, CreateList=True}" />
        <CollectionViewSource x:Key="hr_talentViewSource" d:DesignSource="{d:DesignInstance {x:Type entity:hr_talent}, CreateList=True}" />
    </Page.Resources>

    <Grid DataContext="{StaticResource itemViewSource}" Background="White">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*" />
            <ColumnDefinition Width="3*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="40" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid Name="crud_modal" Background="{StaticResource Modal_BackgroundColor}" Visibility="Hidden" Margin="0,-36,0,0"
			  Grid.ColumnSpan="2" Grid.RowSpan="2" Panel.ZIndex="10" IsVisibleChanged="crud_modal_IsVisibleChanged" />

        <ListBox x:Name="itemDataGrid"
				 ScrollViewer.VerticalScrollBarVisibility="Auto" Grid.Row="1"
				 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
				 ItemContainerStyle="{StaticResource nav_ListSelection}" Style="{StaticResource nav_List}"
				 ItemsSource="{Binding}">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <cntrl:navList recordCode="{Binding code,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" recordSecondaryName="{Binding id_item_type}"
								   recordName="{Binding name,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
								   State="{Binding State, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								   Status="{Binding is_active,Converter={StaticResource ActiveToStatusforitem},UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								   IsChecked="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <Grid Grid.Column="1" Grid.Row="1">
            <Grid.Resources>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedSingleRowTabControl.xaml" />
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>

            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,10" Width="264"
						IsEnabled="{Binding ElementName=toolBar,Path=IsEditable}">
                <StackPanel Orientation="Horizontal">
                    <Label Content="{lex:Loc Name}" Style="{StaticResource input_label}" />
                    <Label Content="A" Style="{StaticResource btn_Label}" MouseUp="Label_MouseUp" />
                </StackPanel>
                <Popup x:Name="popupName" IsOpen="False" Closed="popupName_Closed"
									   PlacementTarget="{Binding ElementName=stackpnlCustomize}" Placement="Mouse">
                    <Border BorderThickness="1" BorderBrush="Gray">
                        <StackPanel Background="WhiteSmoke" Width="180">
                            <Label Content="{lex:Loc Template}"  Style="{StaticResource input_label}" />
                            <ComboBox Grid.Column="1" Style="{StaticResource input_combobox}" ItemsSource="{Binding Source={StaticResource item_templateViewSource}}"
							  metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
							  metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
							  Name="cmbitemtemplate" SelectionChanged="cmbitem_SelectionChanged"
							  DisplayMemberPath="name" SelectedValuePath="id_item_template" />
                            <DataGrid x:Name="dgvSalesDetail" AutoGenerateColumns="False" Margin="0,58,0,0" EnableRowVirtualization="True" VerticalScrollBarVisibility="Auto"

								  ItemsSource="{Binding Source={StaticResource item_templateitem_template_detaildetailViewSource}}" RowDetailsVisibilityMode="VisibleWhenSelected">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="name" Binding="{Binding question,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" />
                                    <DataGridTextColumn Header="Value" Binding="{Binding value,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </Border>
                </Popup>
                <AdornerDecorator>
                    <TextBox Grid.Column="1" Style="{StaticResource input_textbox}"
						 metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
						 metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
						 metro:TextBoxHelper.ClearTextButton="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}"
						 metro:TextBoxHelper.SelectAllOnFocus="True"
						 Text="{Binding name,
										Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
										NotifyOnValidationError=true,
										ValidatesOnDataErrors=True}" />
                </AdornerDecorator>

                <Label Content="{lex:Loc Code}" Style="{StaticResource input_label}" />
                <AdornerDecorator>
                    <TextBox Grid.Column="1" Style="{StaticResource input_textbox}"
							 metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
							 metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
							 metro:TextBoxHelper.ClearTextButton="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}"
							 metro:TextBoxHelper.SelectAllOnFocus="True"
							 Text="{Binding code, Mode=TwoWay, NotifyOnValidationError=true, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                </AdornerDecorator>
                <Label Content="{lex:Loc ItemType}" Style="{StaticResource input_label}" />
                <AdornerDecorator>
                    <ComboBox Grid.Column="1" Style="{StaticResource input_combobox}"
							  metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
							  metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
							  Name="cmbitem" SelectionChanged="cmbitem_SelectionChanged"
                              IsEnabled="{Binding IsEnabled,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"  
							  SelectedValue="{Binding id_item_type, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
													  ValidatesOnExceptions=True, NotifyOnValidationError=True,
													  ValidatesOnDataErrors=True}" />
                </AdornerDecorator>
            </StackPanel>
            <TabControl HorizontalAlignment="Stretch" metro:TabControlHelper.IsUnderlined="True" Margin="0,180,0,0">
                <TabItem Header="{lex:Loc Basic}">
                    <ScrollViewer>
                        <StackPanel HorizontalAlignment="Center" Width="264" IsEnabled="{Binding ElementName=toolBar,Path=IsEditable}">
                            <Label Content="SKU" Style="{StaticResource input_label}" />
                            <AdornerDecorator>
                                <TextBox Grid.Column="1" Style="{StaticResource input_textbox}"
							 metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
							 metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
							 metro:TextBoxHelper.ClearTextButton="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}"
							 metro:TextBoxHelper.SelectAllOnFocus="True"
							 Text="{Binding sku, Mode=TwoWay, NotifyOnValidationError=true, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}" />
                            </AdornerDecorator>
                            <Label Content="{lex:Loc SupplierCode}" Style="{StaticResource input_label}" />
                            <AdornerDecorator>
                                <TextBox Grid.Column="1" Style="{StaticResource input_textbox}"
							 metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
							 metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
							 metro:TextBoxHelper.ClearTextButton="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}"
							 metro:TextBoxHelper.SelectAllOnFocus="True"
							 Text="{Binding supplier_code, Mode=TwoWay, NotifyOnValidationError=true, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                            </AdornerDecorator>
                            <Label Content="{lex:Loc SupplierName}" Style="{StaticResource input_label}" />
                            <AdornerDecorator>
                                <TextBox Grid.Column="1" Style="{StaticResource input_textbox}"
							 metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
							 metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
							 metro:TextBoxHelper.ClearTextButton="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}"
							 metro:TextBoxHelper.SelectAllOnFocus="True"
							 Text="{Binding supplier_name, Mode=TwoWay, NotifyOnValidationError=true, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                            </AdornerDecorator>
                            
                            <Label Content="{lex:Loc Brand}"  Style="{StaticResource input_label}" />
                            <ComboBox x:Name="cbxItemBrand" Grid.Column="1" Style="{StaticResource input_combobox}"
									  metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
									  metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
									  DisplayMemberPath="name" SelectedValuePath="id_brand"
									  ItemsSource="{Binding Source={StaticResource item_brandViewSource}}"
									  SelectedValue="{Binding id_brand, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, ValidatesOnDataErrors=True}" />

                            <Label Content="{lex:Loc Tags}"  Style="{StaticResource input_label}" />
                            <cntrl:SearchableTextbox x:Name="cbxTag" Margin="2" HorizontalAlignment="Center"
												 CollectionViewSource="{StaticResource item_tagViewSource}"
												 focusGrid="True" Height="27" Width="256" Visibility="{Binding ElementName=toolBar, Path=IsEditable, Mode=OneWay, Converter={StaticResource BoolToVisibility}}"
												 KeyDown="cbxTag_KeyDown" MouseDoubleClick="cbxTag_MouseDoubleClick">
                                <cntrl:SearchableTextbox.Columns>
                                    <cntrl:SmartBoxColumn Header="{lex:Loc Cognitivo:local:Tags}" Width="Auto" ForProperty="name"
														  Binding="{Binding name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" EnableSearch="True" />
                                </cntrl:SearchableTextbox.Columns>
                            </cntrl:SearchableTextbox>
                            <DataGrid x:Name="item_tag_detailDataGrid" AutoGenerateColumns="False" EnableRowVirtualization="True" Margin="4"
									  HeadersVisibility="None" CanUserAddRows="False" CanUserDeleteRows="True" IsReadOnly="{Binding ElementName=toolBar, Path=IsEditable, Converter={StaticResource TrueToFalse}}"
									  ItemsSource="{Binding Source={StaticResource itemitem_tagdetailViewSource}}"  
                                      RowEditEnding="ItemTag_RowEditEnding"
                                      RowDetailsVisibilityMode="VisibleWhenSelected">
                                <DataGrid.Columns>
                                    <DataGridCheckBoxColumn Binding="{Binding is_default, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    <DataGridTextColumn Binding="{Binding item_tag.name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" Width="Auto" />
                                    <DataGridTemplateColumn Width="Auto" Header="">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button Command="customcmd:CustomCommands.Delete"
													Style="{StaticResource btnDeleteChildStyle}"
													CommandParameter="{Binding}" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{lex:Loc Commercial}">
                    <StackPanel>
                        <Label Content="{lex:Loc VAT}"  Style="{StaticResource input_label}" />
                        <AdornerDecorator>
                            <ComboBox Grid.Column="1" Style="{StaticResource input_combobox}"
							  metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
							  metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
							  IsReadOnly="{Binding ElementName=toolBar, Path=IsEditable, Converter={StaticResource TrueToFalse}}"
							  Name="cmbvat" ItemsSource="{Binding Source={StaticResource app_vat_groupViewSource}}"
							  SelectedValue="{Binding id_vat_group, Mode=TwoWay,
													  ValidatesOnExceptions=True, NotifyOnValidationError=True,
													  UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" DisplayMemberPath="name" SelectedValuePath="id_vat_group" />
                        </AdornerDecorator>
                        <Label Content="{lex:Loc PriceList}"  Style="{StaticResource input_label}" />
                        <DataGrid x:Name="item_priceDataGrid" VerticalScrollBarVisibility="Auto"
								  AutoGenerateColumns="False" EnableRowVirtualization="True"
								  IsReadOnly="{Binding ElementName=toolBar, Path=IsEditable, Converter={StaticResource TrueToFalse}}"
									InitializingNewItem="item_priceDataGrid_InitializingNewItem"
									ItemsSource="{Binding Source={StaticResource itemitem_priceViewSource}}" Margin="8"
									RowDetailsVisibilityMode="VisibleWhenSelected">
                            <DataGrid.Columns>
                                <DataGridComboBoxColumn Header="{lex:Loc Cognitivo:local:PriceList}" Width="*" ItemsSource="{Binding Source={StaticResource item_price_listViewSource}}"
														DisplayMemberPath="name" SelectedValuePath="id_price_list" SelectedValueBinding="{Binding id_price_list , UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                                <DataGridComboBoxColumn Header="{lex:Loc Cognitivo:local:Currency}" Width="Auto" ItemsSource="{Binding Source={StaticResource app_currencyViewSource}}"
														DisplayMemberPath="name" SelectedValuePath="id_currency" SelectedValueBinding="{Binding id_currency, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" />
                                <DataGridTextColumn
													Header="{lex:Loc Cognitivo:local:Quantity}" Width="Auto" ElementStyle="{StaticResource RightAlignStyle}" >
                                    <DataGridTextColumn.Binding>
                                        <MultiBinding Converter="{StaticResource ToStringFormatConverter}" UpdateSourceTrigger="LostFocus" NotifyOnTargetUpdated="True"
                                   ValidatesOnDataErrors="True" NotifyOnValidationError="True" TargetNullValue="">
                                            <Binding Path="min_quantity" TargetNullValue="" Mode="TwoWay"  />
                                            <Binding Source="{x:Static mainpref:Settings.Default}" Path="QuantityDecimalStringFormat" Mode="OneWay" />
                                        </MultiBinding>
                                    </DataGridTextColumn.Binding>
                                </DataGridTextColumn>
                                <DataGridTextColumn Header="{lex:Loc Cognitivo:local:Price}" Width="SizeToHeader" ElementStyle="{StaticResource RightAlignStyle}"
													Visibility="{Binding Source={x:Static prop:ProductSettings.Default}, Path=VAT_Excluded, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
                                    <DataGridTextColumn.Binding>
                                        <MultiBinding Converter="{StaticResource ToStringFormatConverter}" UpdateSourceTrigger="LostFocus" 
                                   ValidatesOnDataErrors="True" NotifyOnValidationError="True" TargetNullValue="">
                                            <Binding Path="value" TargetNullValue="" Mode="TwoWay"  />
                                            <Binding Source="{x:Static mainpref:Settings.Default}" Path="CurrencyDecimalStringFormat" Mode="OneWay" />
                                        </MultiBinding>
                                    </DataGridTextColumn.Binding>
                                </DataGridTextColumn>
                                <DataGridTextColumn Header="{lex:Loc Cognitivo:local:PricewithVAT}" Width="Auto" ElementStyle="{StaticResource RightAlignStyle}"
													Visibility="{Binding Source={x:Static prop:ProductSettings.Default}, Path=VAT_Included, Converter={StaticResource BoolToVisibility}, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}">
                                    <DataGridTextColumn.Binding>
                                        <MultiBinding Converter="{StaticResource ToStringFormatConverter}" UpdateSourceTrigger="LostFocus" 
                                   ValidatesOnDataErrors="True" NotifyOnValidationError="True" TargetNullValue="">
                                            <Binding Path="valuewithVAT" TargetNullValue="" Mode="TwoWay"  />
                                            <Binding Source="{x:Static mainpref:Settings.Default}" Path="CurrencyDecimalStringFormat" Mode="OneWay" />
                                        </MultiBinding>
                                    </DataGridTextColumn.Binding>
                                </DataGridTextColumn>
                                <DataGridTemplateColumn Width="30">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Button Command="customcmd:CustomCommands.Delete" CommandParameter="{Binding}" Style="{StaticResource btnDeleteChildStyle}" />
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </StackPanel>
                </TabItem>
                <TabItem Header="{lex:Loc Details}">
                    <StackPanel IsEnabled="{Binding ElementName=toolBar,Path=IsEditable}">
                        <toolkit:RichTextBox x:Name="rtbxDetails" Grid.Row="1" Margin="8" BorderBrush="Gray" Padding="4" MinHeight="128"
										  Text="{Binding description, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true, UpdateSourceTrigger=PropertyChanged}"
										  ScrollViewer.VerticalScrollBarVisibility="Auto" />
                    </StackPanel>
                </TabItem>
                <TabItem Header="{lex:Loc Usage}" Visibility="{Binding SelectedIndex, FallbackValue=Visible, ConverterParameter=0, Converter={StaticResource ItemProduct2VisibilityConverter}, ElementName=cmbitem}">
                    <StackPanel Orientation="Vertical" Grid.ColumnSpan="2" DataContext="{StaticResource itemViewSource}">
                        <Label Content="{lex:Loc Measurement}"  Style="{StaticResource input_label}" />
                        <ComboBox Style="{StaticResource input_combobox}"
									metro:ControlsHelper.FocusBorderBrush="RoyalBlue"
									metro:ControlsHelper.MouseOverBorderBrush="#FF94AFFE"
									IsReadOnly="{Binding ElementName=toolBar, Path=IsEditable, Converter={StaticResource TrueToFalse}}"
									ItemsSource="{Binding Source={StaticResource app_measurementViewSourcenew}}"
									SelectedValue="{Binding id_measurement, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
															ValidatesOnExceptions=True, NotifyOnValidationError=True,
															ValidatesOnDataErrors=True}" DisplayMemberPath="name" SelectedValuePath="id_measurement" />
                        <StackPanel DataContext="{StaticResource itemitem_productViewSource}">
                            <Label Content="{lex:Loc Factor}"  Style="{StaticResource input_label}" />
                            <DataGrid x:Name="item_conversion_factorDataGrid" AutoGenerateColumns="False" Margin="8"
									IsReadOnly="{Binding ElementName=toolBar, Path=IsEditable, Converter={StaticResource TrueToFalse}}"
									EnableRowVirtualization="True" ItemsSource="{Binding Source={StaticResource itemitem_conversion_factorViewSource}}"
									RowDetailsVisibilityMode="VisibleWhenSelected">
                                <DataGrid.Columns>
                                    <DataGridComboBoxColumn DisplayMemberPath="name" SelectedValuePath="id_measurement"
														ItemsSource="{Binding Source={StaticResource app_measurementViewSourceconvert}}"
														SelectedValueBinding="{Binding id_measurement, UpdateSourceTrigger=PropertyChanged}"
														Header="{lex:Loc Cognitivo:local:Measurement}" Width="*" />
                                    <DataGridTextColumn Binding="{Binding value}" Header="{lex:Loc Cognitivo:local:Value}" Width="100" />
                                    <DataGridTemplateColumn Width="30" Header="">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button Command="customcmd:CustomCommands.Delete" CommandParameter="{Binding}" Style="{StaticResource btnDeleteChildStyle}" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>

                        <StackPanel Orientation="Vertical" Grid.ColumnSpan="2">
                            <Label Content="{lex:Loc Dimension}"  Style="{StaticResource input_label}" />
                            <DataGrid x:Name="item_dimentionDataGrid" VerticalScrollBarVisibility="Auto" AutoGenerateColumns="False"
										EnableRowVirtualization="True" Height="Auto" Margin="8,4"
										ItemsSource="{Binding Source={StaticResource itemitem_dimentionViewSource}}"
										RowDetailsVisibilityMode="VisibleWhenSelected">
                                <DataGrid.Columns>
                                    <DataGridComboBoxColumn x:Name="dimentionComboCol" Header="Dimension" Width="*"
														ItemsSource="{Binding Source={StaticResource app_dimentionViewSource}}" DisplayMemberPath="name" SelectedValuePath="id_dimension"
														SelectedValueBinding="{Binding id_app_dimension, UpdateSourceTrigger=PropertyChanged}" />
                                    <DataGridTextColumn Binding="{Binding value, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Header="value" Width="100" />
                                    <DataGridComboBoxColumn x:Name="AppMeasurementComboBox"
														DisplayMemberPath="name" SelectedValuePath="id_measurement"
														ItemsSource="{Binding Source={StaticResource app_measurementViewSource}}"
														SelectedValueBinding="{Binding id_measurement, UpdateSourceTrigger=PropertyChanged}" Header="Measurement" Width="*" />
                                    <DataGridTemplateColumn Width="30" Header="">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button Command="customcmd:CustomCommands.Delete" CommandParameter="{Binding}" Style="{StaticResource btnDeleteChildStyle}" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </StackPanel>
                </TabItem>
                <TabItem Header="{lex:Loc Stock}" Visibility="{Binding SelectedIndex, ConverterParameter=0, Converter={StaticResource ItemProduct2VisibilityConverter}, ElementName=cmbitem}">
                    <Grid DataContext="{StaticResource itemitem_productViewSource}" Margin="8,0"  IsEnabled="{Binding ElementName=toolBar,Path=IsEditable}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="4*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Label Content="{lex:Loc CanExpire}" Grid.Column="0" Grid.Row="0" Style="{StaticResource input_label}" />
                        <CheckBox x:Name="can_expireCheckBox" Content="" Grid.Column="1"
								  IsChecked="{Binding can_expire, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}" Style="{StaticResource input_checkbox}" />
                        <Label Content="{lex:Loc HasWeight}" Grid.Column="0" Grid.Row="1" Style="{StaticResource input_label}" />
                        <CheckBox x:Name="is_weigtedCheckBox" Content="" Grid.Column="1"
								  IsChecked="{Binding is_weigted, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}" Grid.Row="1" Style="{StaticResource input_checkbox}" />
                        <Label Content="{lex:Loc StockMaximum}" Grid.Column="0" Grid.Row="2" Style="{StaticResource input_label}" />
                        <TextBox x:Name="stock_maxTextBox" Grid.Column="1" Grid.Row="2"
								 Text="{Binding stock_max, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}" Style="{StaticResource input_textbox}" />
                        <Label Content="{lex:Loc StockMinimum}" Grid.Column="0" Grid.Row="3" Style="{StaticResource input_label}" />
                        <TextBox x:Name="stock_minTextBox" Grid.Column="1" Grid.Row="3"
								 Text="{Binding stock_min, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}" Style="{StaticResource input_textbox}" />
                    </Grid>
                </TabItem>
                <TabItem Header="{lex:Loc Service}" Visibility="{Binding SelectedIndex, ConverterParameter=2, Converter={StaticResource ItemProduct2VisibilityConverter}, ElementName=cmbitem}">
                    <StackPanel IsEnabled="{Binding ElementName=toolBar,Path=IsEditable}">

                        <StackPanel Orientation="Horizontal">
                            <ComboBox x:Name="cmbtalent" ItemsSource="{Binding Source={StaticResource hr_talentViewSource}}" DisplayMemberPath="name" SelectedValuePath="id_talent"
								  SelectedValue="{Binding id_talent, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
								  Style="{StaticResource input_combobox}" />
                            <Button x:Name="btnadd" Content="{lex:Loc Insert}" Click="btnadd_Click"></Button>
                        </StackPanel>
                        <DataGrid x:Name="hr_talent_detailDataGrid" AutoGenerateColumns="False" EnableRowVirtualization="True" Height="200" ItemsSource="{Binding Source={StaticResource itemitem_serviceViewSource}}"  RowDetailsVisibilityMode="VisibleWhenSelected">
                            <DataGrid.Columns>
                                <DataGridTextColumn x:Name="id_talentColumn" Binding="{Binding hr_talent.name}" Header="{lex:Loc Cognitivo:local:Talent}" Width="SizeToHeader" />
                            </DataGrid.Columns>
                        </DataGrid>
                    </StackPanel>
                </TabItem>
            </TabControl>
            <StackPanel Grid.Column="1" Grid.RowSpan="3">
                <Label Content="{lex:Loc Details}" FontWeight="Medium" Foreground="{StaticResource Label_ImportantColor}" Margin="5" />

                <Controls:ImageViewer ReferenceID="{Binding id_item, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" ApplicationName="Items" AllowDrop="True" />

                <TextBlock Text="{Binding name}" Style="{StaticResource text_H3}" TextWrapping="Wrap" />
                <StackPanel IsEnabled="{Binding ElementName=toolBar,Path=IsEditable}">
                    <Label Content="{lex:Loc Properties}" FontWeight="Medium" Foreground="{StaticResource Label_ImportantColor}" Margin="5" />
                    <metro:ToggleSwitch Content="{lex:Loc Active}" OnSwitchBrush="PaleGreen" IsChecked="{Binding is_active, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true, UpdateSourceTrigger=PropertyChanged}" />
                </StackPanel>
                <Rectangle Height="1" Fill="Silver" Margin="16,4" />
                <Label Content="{lex:Loc QuickAction}" FontWeight="Medium" Foreground="{StaticResource Label_ImportantColor}" Margin="5" />
                <StackPanel x:Name="stackpnlCustomize" Orientation="Horizontal">
                    <Label Content="A" Style="{StaticResource btn_Label}" />
                    <TextBlock x:Name="tbCustomize" MouseUp="tbCustomize_MouseUp" VerticalAlignment="Center">
							<Hyperlink x:Name="hrefCustomize"><Run Text="{lex:Loc Customize}" /></Hyperlink></TextBlock>
                    <Popup x:Name="popupCustomize" IsOpen="False" Closed="popupCustomize_Closed"
							   PlacementTarget="{Binding ElementName=stackpnlCustomize}" Placement="Mouse">
                        <Border BorderThickness="1" BorderBrush="Gray">
                            <StackPanel Background="WhiteSmoke" Width="180">
                                <Label Content="{lex:Loc Filter}" FontWeight="Medium" Foreground="{StaticResource Label_ImportantColor}" />
                                <CheckBox Margin="6,0,0,0"
								IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=Product, Mode=TwoWay}">
                                    <Label Content="{lex:Loc Product}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                                <CheckBox Margin="6,0,0,0"
								IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=RawMaterial, Mode=TwoWay}">
                                    <Label Content="{lex:Loc RawMaterial}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                                <CheckBox Margin="6,0,0,0"
								IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=FixedAsset, Mode=TwoWay}">
                                    <Label Content="{lex:Loc FixedAssets}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                                <CheckBox Margin="6,0,0,0"
								IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=Service, Mode=TwoWay}">
                                    <Label Content="{lex:Loc Service}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                                <CheckBox Margin="6,0,0,0"
								IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=Task, Mode=TwoWay}">
                                    <Label Content="{lex:Loc Task}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                                <CheckBox Margin="6,0,0,0"
								IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=Supplies, Mode=TwoWay}">
                                    <Label Content="{lex:Loc Supplies}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                                <CheckBox Margin="6,0,0,0"
								IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=ServiceContract, Mode=TwoWay}">
                                    <Label Content="{lex:Loc ServiceContract}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                                <Label Content="{lex:Loc PriceList}" FontWeight="Medium" Foreground="{StaticResource Label_ImportantColor}" />
                                <CheckBox Margin="6,0,0,0" x:Name="chkPriceWithVAT"
										  IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=VAT_Included, Mode=TwoWay}">
                                    <Label Content="{lex:Loc VATIncluded}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                                <CheckBox Margin="6,0,0,0" x:Name="chkPriceWithoutVAT"
								IsChecked="{Binding Source={x:Static prop:ProductSettings.Default}, Path=VAT_Excluded, Mode=TwoWay}">
                                    <Label Content="{lex:Loc VATExcluded}" Style="{StaticResource generic_Label}" />
                                </CheckBox>
                            </StackPanel>
                        </Border>
                    </Popup>
                </StackPanel>
                <StackPanel x:Name="stackpnlCost" Orientation="Horizontal" 
                            Visibility="{Binding ElementName=this, Path=CanSeeCost, Converter={StaticResource BoolToVisibility}}"
                            IsEnabled="{Binding ElementName=toolBar,Path=IsEditable}">
                    <Label Content="$" Style="{StaticResource btn_Label}" />
                    <TextBlock x:Name="tbCost" VerticalAlignment="Center">
							<Hyperlink x:Name="hrefCost" Click="hrefCost_Click"><Run Text="{lex:Loc Cost}" /></Hyperlink>
                    </TextBlock>
                    <Label Style="{StaticResource input_label}" Content="{Binding unit_cost, Mode=OneWay, FallbackValue=0, StringFormat=N2}"/>
                </StackPanel>
            </StackPanel>
        </Grid>

        <local:toolBar x:Name="toolBar" VerticalAlignment="Top" Grid.ColumnSpan="2"
					   btnSave_Click="Save_Click" appName="Items"
					   btnDelete_Click="Delete_Click"
					   btnCancel_Click="Cancel_Click"
					   btnEdit_Click="Edit_Click"
					   btnNew_Click="New_Click"
                       btnSync_Click="Load_PrimaryData"
					   btnSearch_Click="Search_Click" IsEnabled="False"
					   State="{Binding State, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
    </Grid>
</Page>